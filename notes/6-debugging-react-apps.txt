===============================
Section 6: Debugging React Apps
===============================

------------------------------------
77. Understanding Error Messages
------------------------------------

When you are writing your application and React flags an error message, this message will take over your browser and will tell you what the type of error it is, and what file/line it is coming from in your application. 

As an example, if I incorrectly point to 'input' instead of 'target' when pulling information out of my 'event' object, we see the following: 
--
app.js
--
person.name = event.input.value
--

--
BROWSER
--
TypeError: Cannot read property 'value' of undefined

App._this.nameChangedHandler
src/App.js:27

> 27 | person.name = event.input.value;
--

In the example above, I incorrectly set the 'name' of my person object to 'event.input.value'. React does not recognize this and so it throws an error:
(TypeError: Cannot read property 'value' of undefined)

'input' is not a property of the 'event' object. So React flagged this error because 'input' is undefined, and 'undefined' does not have a 'value' property that we can pull from.

React shows me where in my application this error occured, first it shows me the event the error occurs in:
(App._this.nameChangedHandler)

And it shows me in which file, and on which line the error occurs:
(src/App.js:27)


With this knowledge, we can immediately look at the line of the file that contains the error that React flagged to us. It also gives us an idea of the type of error React is experiencing, which helps us narrow down the cause of the error.



------------------------------------
78. Finding Logical Errors by using Dev Tools & Sourcemaps
------------------------------------

Sometimes React will not flag errors to you in the brower if the error created is seen as legitimate syntax. 

An example of this would be if you're checking if a property that you've incorrectly named is equal to something else. This would not flag an error in the browser because the incorrectly named property would be seen as 'undefined', which can be compared to other values:
--
p.userId === id;
--

In the example above, if there is no such thing 'userId' property in 'p', then the comparison we're making is 'underfined === id', which is valid syntax. This error would not be shown in the browser, as React does not know that this is incorrect.

This will cause errors in our application however, and in-order to de-bug this error, we first can open the 'Sources' tab in our developer tools for Chrome or the 'Debugger' tab in Firefox.

In this tab, you will see your entire applications file structure in its current state. This is made possible while developing your application with a feature called Source Maps.

*Note* When you build your application for Production, Source Maps will not be included.

Source Maps allow you to go into the code you write in your browser to help you de-bug errors. We can begin to de-bug our application by first creating a break-point in our code where we wish to start tracking the behaviour of the code. For example, I would create a break-point on the function that's not working the way I would expect it to.

With a breakpoint created, you can re-fresh the page, and the code will pause its execution as soon as it hits the break-point you created.

When you've hit the break-point, you then have options to:

Play/Pause: 
- Toggle the execution of the code.

Step Over:
- Proceeds to the next line in your current scope (goes to the next line), without descending into any method calls on the way. This is generally used for following the logic through a particular method without worrying about the details of its collaborators, and can be useful for finding at what point in a method the expected conditions are violated.

Step Into:
- Descend into any method calls on the current line. If there are multiple method calls, they'll be visited in order of execution; if there are no method calls, this is same as step over. This is broadly equivalent to following every individual line of execution as would be seen by the interpreter.

Step Out:
- proceeds until the next "return" or equivalent - i.e. until control has returned to the preceding stack frame. This is generally used when you've seen all you need to at this point/method, and want to bubble up the stack a few layers to where the value is actually used.


To de-bug our function, I typically 'Step Into' the code step by step after hitting the break-point. 

As I do this, if I reach a point in the code execution where I know a value should be read in a certain way (eg. 'p.userId' should be a string of characters), then I will hover over that part of the code to confirm whether or not the value is as I expect it should be.

If I see a value that I am not expecting to see (eg 'userId' is 'undefined'), then I can begin to deduce why this is the case.

In this case, 'userId' is not a property of 'p', so I am getting 'undefined' on 'userId' because 'userId' does not exist. I can confirm this by hovering over 'p', which shows me all of the properties available on 'p', none of which are 'userId'.

Now that I've figured out where the error exists in the code, and why it is an error, I can go back into the codebase and resolve the issue.



------------------------------------
80. Working with the React Developer Tools
------------------------------------





------------------------------------
81. Using Error Boundaries (React 16+)
------------------------------------





------------------------------------
82. Wrap Up
------------------------------------





------------------------------------
83. Useful Resources & Links
------------------------------------

