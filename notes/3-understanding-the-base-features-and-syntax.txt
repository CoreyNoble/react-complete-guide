===================================================
Section 3: Understanding the Base Features & Syntax
===================================================

------------------------------------
25. The Build Workflow
------------------------------------

To set up our local project we use the npm package 'create-react-app'. This comes with a build workflow that helps with: 

- CSS auto-prefixing - 'Normalizes' our CSS for wide browser support.
- Code linting - Warns you if you are writing sub-optimal code.
- Dependency management tool (Node -> npm) - Manages our third-party development libraries and packages.
- Bundler (Webpack) - Allows us to write modular code in separate files, then bundles these files together for release.
- Compiler (Babel) - Compiles our ES6/ES7 code into ES5 code.
- Local Development Server



------------------------------------
26. Using 'create-react-app'
------------------------------------

Following these steps will create a new React application on your machine.

1. First, if you do not have npm, first you need to install Node.JS (LTS): 

https://nodejs.org/en/download/ 

2. Next, install the 'create-react-app' package globally on your machine through the terminal using npm:

npm install -g create-react-app

3. Next, using the terminal, navigate to the folder on your machine where you want your React application to reside, then run the following command, setting 'application-name' as the name for your application:

create-react-app application-name

4. Once this finished installing, you can run the following command to start up the project. When running, a new tab will open in your browser, which will be the working application using your local development server:

npm start

You can now begin working on your application.

To cancel running the project, use ctrl+C in the terminal and enter Y to confirm.



------------------------------------
27. Understanding the Folder Structure
------------------------------------

See my notes in '/notes/3-react-folder-structure.txt'.



------------------------------------
28. Understanding Component Basics
------------------------------------

Typically in React we render only 1 root component. This is <App /> which is loaded from app.js into the ReactDOM.render() method inside of index.js.

Inside of <App /> is where we nest all of the other components our application might need. Each component can be comprised of other nested components, but in the end, all we're rendering is <App /> to create our single-page application.

React components can either be:
1. Stateful (Class-Based).
2. Stateless (Functional).

Stateful components start with the 'class' keyword. We import { Component } from 'react'. They then extend 'Component' to the 'class'. This provides a render() method to the class. The class based component needs to use render(). React calls this method to render something to the screen. render() is also what React uses to refresh the page when data/state changes.

As the name suggests, Stateful components are the only components that allow you to manage state out-of-the-box. Functional components can only use state through the use of React Hooks.

In both Stateful and Stateless components, you need to return(); JSX to the DOM. You also need to export the component in-order to import it elsewhere in your application.

Stateful Component Example (Class-Based):
--
import React, { Component } from 'react';

class App extends Component {
    render() {
        return(
            <div className="App">
                ...
            </div>
        );
    }
}

export default App;
--



------------------------------------
29. Understanding JSX
------------------------------------

When you import 'React' it imports a method that React uses to compile your JSX code. When you return() JSX, the compiler takes each element your rendering and outputs it into the 'React.createElement();' method.

'React.createElement()' takes in 3 arguments:
- First it needs to know what element it is creating (eg. <div>)
- Next it takes in the configuration for that element or 'null' (eg. attributes).
- Finally it takes in any amount of nested children to that element (eg. nested <h1>), each child being its own argument.

Basic Example: 
React.createElement('div', null, 'h1', 'Hi, I\'m a React App!');

The example above will nest two text nodes inside of the <div>, This includes the 'h1' string, and the 'Hi, I\'m a React App!' string. This is because the third and fourth arguments are interpereted as text.


In-order to properly nest elements inside of the <div> you need to use a nested 'React.createElement()' method for each child argument.

Nested Elements Example: 
React.createElement('div', null, React.createElement('h1', null, 'Hi, I\'m a React App!'));


When adding attributes to the method, the attributes are passed in as one JavaScript object {}.

Attribute Example:
React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Hi, I\'m a React App!'));


In summary, JSX is JavaScript code that resembles HTML. The 'React.createElement()' method is the underlying method that React uses to build up the markup we write using JSX. When React compiles our JSX, it gets compiled into 'React.createElement(element, {attributes: ''}, children)' methods.



------------------------------------
30. JSX Restrictions
------------------------------------

JSX is JavaScript code that looks like HTML. Because of this, we can't write HTML exactly the way we're used to, JSX comes with a few restrictions. 

Some attributes like the 'class' attribute have been altered if they are reserved words in JavaScript. For example, instead of using the 'class' attribute, we use 'className'. JSX will convert 'className' into the 'class' attribute when the code is compiled.

When writing JSX, you need to pre-fix it with the 'return' statement.

The JSX you return should only have 1 root element, as in the end, it all gets compiled into one 'React.createElement()' method.

With React 16, this rule has been loosened, but it is still best practice to create JSX in a manner in-which it only returns one root element. Doing so ensures JSX is always returning only one root component, and styling can be scoped to the root element.

When returning multiple lines of JSX code, the returned JSX must be wrapped with ();

Example (One line of JSX):
return <div className"container"></div>

Example (Multiple lines of JSX):
return (
    <div className="App">
        <h1>Hi, I'm a React App</h1>
        <p>This is really working!</p>+
    </div>
);



------------------------------------
31. Creating a Functional Component, Exporting and Importing Components
------------------------------------

Convention when creating components is to nest each component inside of its own folder with a name that describes what the component is about. Each Component should begin with a capital character. 

Component File Example:
/Person/Person.js

In its simplest form, A component is just a JavaScript function that returns JSX. The function name is usually the same as the component/file name, but with a lower case character (Camel case). 

When creating a component, you also need to import 'React' to compile the JSX, and export the function as the default export for that file.

Functional Component Example (es6):
--
import React from 'react';

const person = () => {
    return <p>I'm a Person!</p>
}

export default person;
--

There are two types of components we can develop: Functional, or Class-Based components.

The example above is a Functional Component because we are not importing { Component } from 'react'. And we are not creating a class that extends the 'Component' method. Because of this, the component cannot manage state, and behaves as a pure function. Ideally, as many components as possible should be Functional Components. The less components that manage state, the better. Doing so will help developers manage the data flow of the application.

To import a component into another file, you need to write the following (typically near the top of the page).

Import Component Example:
--
import Person from './Person';
--

When importing the default export from a component, the import can be named whatever you want, No matter what you name it, the default export will be pulled in. In the example above we are naming the import 'Person', but that name could be whatever you want it to be, although it's best practice to keep the names consistent. The function that gets pulled in will be person{} as it is the default export for that file.

We do not need to add the '.js' extension to the import because '.js' files are taken into consideration during compilation. All other file types we import require their extension.

To use our imported component, we write it inside of our JSX. since HTML uses lower-case characters for each element (eg. <div>, <h1>, ...), React requires our imported components to start with a capital character. (eg. <Person />);

Component Usage Example (Self-Closing):
--
    return(
        <div className="App">
            <h1>Hi, I'm a React App</h1>
            <Person />
        </div>
    );
--

In the example above, We write '<Person />' where the Person component will be rendered in our application. We are writing '<Person />' as a self-closing element.

If you need to nest content inside of the component, you can also write them as open/closing tags, However, the content won't be displayed unless if it is accounted for inside of the component logic (explained later):

Component Usage Example (Wrapping):
--
    return(
        <div className="App">
            <h1>Hi, I'm a React App</h1>
            <Person>
                <p>Child Content</p>
            </Person>
        </div>
    );
--



------------------------------------
33. Working with Components & Re-Using Them
------------------------------------

Components are awesome because we can focus our code and make it much more maintainable. Components are also re-usable and configurable.

Re-using a component is simple, all you have to do is make sure the component is imported into the file in-which you want to use the component. Then you can add as many of the same component as you need.

Re-Using Components Example:
--
    return(
        <div className="App">
            <h1>Hi, I'm a React App</h1>
            <Person />
            <Person />
            <Person />
        </div>
    );
--

In the example above, I am re-using the same '<Person />' component 3 times.



------------------------------------
34. Outputting Dynamic Content
------------------------------------

We can also configure components to output dynamic content.

If we have some dynamic content in our JSX that we want to execute, like regular JavaScript, instead of compiling as HTML/strings, then we need to wrap that code in {}.

Dynamic JavaScript Example:
--
<p>I am {Math.floor(Math.random()*30)} years old</p>
--

In the example above, we are outputting a random an age in our component using a one-line JavaScript expression. 

Using {}, we cannot do things like output a class, {} only allows us to output one-line expressions or make function calls.

In-order to perform complicated actions, you need to make a call to a function, which will contain the complex logic you require, which will return the end result of that logic.



------------------------------------
35. Working with Props
------------------------------------

We can use 'props' to make our component configurable, flexible, and dynamic. 'props' are passed into a component as attributes.

Passing-In 'props' Attributes Examples:
--
<Person name="Corey" age="26" />
<Person name="Kaitlin" age="26" />
--

In the above example, we are passing in a 'name' and 'age' property for each <Person> component.

Just adding these attributes alone won't change anything in the output of our component, because the component is not yet using that information. In-order for the component to output these 'props' first we need to handle them inside of the <Person> component.

By default, React provides one argument by default to each component, which we typically accept with the name 'props'. 'props' is an object which contains all of the attributes that have been defined on the component.

Handing Props In A Component Example:
--
const person = (props) => {
    return <p>I'm {props.name} and I am {props.age} years old.</p>
}
--

In the example above we name the argument we receive 'props' (development standard). And we call the value for each attribute using one line JavaScript expressions (eg. {props.name}, {props.age}). This is how we use 'props' in Functional Components.

In Class-Based Components, you have to append the 'this' keyword when using 'props' (eg. {this.props.name}, {this.props.age}).



------------------------------------
36. Understanding the Children Property
------------------------------------

There is a special prop that React gives us access to in-order to access children of the component. That prop is called 'children', it is a reserved keyword in React. 'children' refers to any elements between the opening and closing tag of our component. This could be any markup, from a simple string of text, to complex HTML structure.

In-order to access children, you simply have to call it when accessing your 'props'.

Accessing Children Prop Example:
--
const person = (props) => {
    return (
        <p>I'm {props.name} and I am {props.age} years old.</p>
        <p>{props.children}</p>
    );
}
--

In the example above, I am adding a new paragraph element to my component's return statement, which will display the children of that component. 

If no children are present, you would see that an empty <p></p> would be rendered to the screen, because 'children' is null. If we're reling on the inner HTML to handle all of the structure, we would not want to wrap{props.children}.



------------------------------------
37. Understanding & Using State
------------------------------------

State allows you to manipulate data in your component from outside of the component, instead of from the inside of the component; for example, changing text through the click on an external button.

State can only be managed through Class-based components as they have properties available to them that we can manipulate. Think of properties as variables of a Class.

There's one special property that you can define in any component that extends { Component } from 'react', This property is called 'state'.

Where 'props' are set and passed from outside of a component:
<Person name="Corey" age="27">

'state' is managed from inside of a Class-based component. We initialize it by creating a new object inside of the class with the reserved 'state' keyword.

Initializing State Example:
--
class App extends Component {
    state = {
        persons: [
            { name: 'Corey', age: 26 },
            { name: 'Kaitlin', age: 26 },
            { name: 'Kyle', age: 21 },
        ]
    }
}
--

You can set up any type of data in the 'state' object, whether it's arrays, objects, strings, integers, booleans, etc... Every set of data in 'state' is separated by a comma. In the example above we create a 'persons' array, containing an object of data for each person in the array.


Using 'state' Example:
--
return(
    <Person name={this.state.persons[0].name} age={this.state.persons[0].age} />
    <Person name={this.state.persons[1].name} age={this.state.persons[1].age} />
    <Person name={this.state.persons[2].name} age={this.state.persons[2].age} />
);
--

In the example above we access the 'state' property using the 'this' keyword, which is required to access properties in Class-based components. Then we drill down to the data points we need inside of the 'state' (eg. {this.state.persons[0]...}).

'state' is a special keyword in React. The reason it is special is because if we update the 'state' property, it will trigger React to update the DOM for the component with the updated 'state'.

* Note *
Historically 'state' could only be managed through Class-based components, however, with React 16.8 we can now manage state using React Hooks in functional components. However, Functional components should be used without state as often as possible because state should be used with careful consideration to ensure the codebase is more maintainable and easy to understand. Because of this, the majority of this course only manipulates state through Class-based components. We look at introducing state with React Hooks towards the end of the course.



------------------------------------
38. Props & State
------------------------------------

Only changes in props and/or state trigger React to re-render your components and potentially update the DOM in the browser.

Props:
props  allow you to pass data from a parent (wrapping) component to a child (embedded) component.


Example:

AllPosts Component:
--
const posts = () => {
    return (
        <div>
            <Post title="My first Post" />
        </div>
    );
}
--

'title' is the custom property set up on the Post component.


Post Component:
--
const post = (props) => {
    return (
        <div>
            <h1>{props.title}</h1>
        </div>
    );
}
--

The Post component receives the 'props' argument. You can of course name this argument whatever you want - it's your function definition, React doesn't care! But React will pass one argument to your component function => An object, which contains all properties you set up on <Post ... />.

{props.title}  then dynamically outputs the 'title' property of the 'props'  object - which is available since we set the 'title' property inside AllPosts  component.

------

State:
While props allow you to pass data down the component tree (and hence trigger a UI update), state is used to change the component from within. Changes to state also trigger a UI update.


Example:

NewPost Component:
--
class NewPost extends Component {
    state = {
        counter: 1
    };  
 
    render () {
        return (
            <div>{this.state.counter}</div>
        );
    }
}
--

Above, the NewPost component contains 'state'. Only class-based components can define and use state. You can of course pass the state down to functional components, but they can't directly edit it.

'state' is a property of the 'Component' Class, you have to call it 'state', the name is not optional. You can then access it via 'this.state' in your JSX code (which you return in the required 'render()' method).

Whenever 'state' changes, the component will re-render and reflect the new 'state'. The difference to 'props' is, that this happens within one and the same component, you don't receive new data (props) from outside.



------------------------------------
39. Handling Events with Methods
------------------------------------

We can handle a click event on a button by first adding the 'onClick' attribute to the <button> element. In normal HTML, the attribute would be named 'onclick'; however, since this is JSX, that attribute is now defined as 'onClick'.

Next, we assign a value to the attribute, which determines the code we want to run when the click event takes place. To do this we use {} to execute dynamic code. Typically we want to execute a method (function) in our Class.

When creating an event handler method, best practice is to append the name of the function with 'Handler' to signal that its a method you aren't actively calling, but are assigning it as an event handler. For example, if my method is going to switch a name, I would name it 'switchNameHandler'.


Example of Calling an Event Through 'onClick':
--
return(
<button onClick={this.switchNameHandler}>Switch Name</button>
);
--

In the above example, we call the 'this.switchNameHandler' method inside of the 'onClick' event. We DO NOT immediately execute it with '()', if we did, the method would execute as soon as it is rendered to the page. Instead, we just make a reference to the method by pointing to it. When the event is fired, React will execute the handler method.


Example of Creating a Handler Method:
--
switchNameHandler = () => {
    console.log('Was clicked!');
}
--

In the above example, we use the same syntax as the 'state' property, and similarly we place it before the 'render()' method in our Class.

We equate it to a function, which turns it into a method. In doing so, 'switchNameHandler' is now a property that we can access within our Class. We use an es6 arrow function '= () => {}' to ensure the 'this' keyword is always bound to the Class at runtime.


With the method set up, and with the button calling the method during the 'onClick' event; if you view the console, every time the button is clicked, you would see the console log 'Was clicked!'.



------------------------------------
40. To Which Events Can You Listen?
------------------------------------

In the last lecture, we saw that you can react to the onClick event - but to which other events can you listen? You can find a list of supported events here: 
https://reactjs.org/docs/events.html#supported-events

--

Clipboard Event Names:
onCopy, onCut, onPaste

Clipboard Event Properties:
DOMDataTransfer, clipboardData

--

Composition Event Names:
onCompositionEnd, onCompositionStart, onCompositionUpdate

Composition Event Properties:
string: data

--

Keyboard Event Names:
onKeyDown, onKeyPress, onKeyUp

Keyboard Event Properties:
boolean: altKey
number: charCode
boolean: ctrlKey
boolean: getModifierState(key)
string: key
number: keyCode
string: locale
number: location
boolean: metaKey
boolean: repeat
boolean: shiftKey
number: which

--

Focus Event Names:
onFocus, onBlur

These focus events work on all elements in the React DOM, not just form elements.

Focus Event Properties:
DOMEventTarget, relatedTarget

--

Form Event Names:
onChange, onInput, onInvalid, onSubmit

--

Mouse Event Names:
onClick, onContextMenu, onDoubleClick, onDrag, onDragEnd, onDragEnter, onDragExit, onDragLeave, onDragOver, onDragStart, onDrop, onMouseDown, onMouseEnter, onMouseLeave, onMouseMove, onMouseOut, onMouseOver, onMouseUp, 

The onMouseEnter and onMouseLeave events propagate from the element being left to the one being entered instead of ordinary bubbling and do not have a capture phase.

Mouse Event Properties:
boolean: altKey
number: button
number: buttons
number: clientX
number: clientY
boolean: ctrlKey
boolean: getModifierState(key)
boolean: metaKey
number: pageX
number: pageY
DOMEventTarget: relatedTarget
number: screenX
number: screenY
boolean: shiftKey

--

Selection Event:
onSelect

--

Touch Event Names:
onTouchCancel onTouchEnd onTouchMove onTouchStart

Touch Event Properties:
boolean: altKey
DOMTouchList: changedTouches
boolean: ctrlKey
boolean: getModifierState(key)
boolean: metaKey
boolean: shiftKey
DOMTouchList: targetTouches
DOMTouchList: touches

--

UI Event:
onScroll

UI Event Properties:

number: detail
DOMAbstractView: view

--

Wheel Event:
onWheel

Wheel Event Properties:
number: deltaMode
number: deltaX
number: deltaY
number: deltaZ

--

Media Event Names:
onAbort, onCanPlay, onCanPlayThrough, onDurationChange, onEmptied, onEncrypted, onEnded, onError, onLoadedData, onLoadedMetadata, onLoadStart, onPause, onPlay, onPlaying, onProgress, onRateChange, onSeeked, onSeeking, onStalled, onSuspend, onTimeUpdate, onVolumeChange, onWaiting,

--

Image Event Names:
onLoad, onError

--

Animation Event Names:
onAnimationStart, onAnimationEnd, onAnimationIteration

Animation Event Properties:
string: animationName
string: pseudoElement
float: elapsedTime

--

Transition Event:
onTransitionEnd

Transition Event Properties:
string: propertyName
string: pseudoElement
float: elapsedTime

Other Events:
onToggle



------------------------------------
41. Manipulating the State
------------------------------------

In-order to manipulate the state during an event, let's go back to our 'switchNameHandler' method. If we want to change our 'persons' data inside of the 'state' when the event is executed, we:

DON'T DO THIS
--
switchNameHandler = () => {
    this.state.persons[0].name = 'Cory'
}
--

The above example is an attempt to directly mutate the state, which will not work, as React does not recognize this. Instead, we need to use the special 'setState()' method which is made available to us when we extend '{ Component }' from React into our Class.

The 'setState()' method allows us to update the 'state' property from React. When we use 'setState()', React knows that the 'state' is changed, and then updates the DOM with the new 'state'.

'setState()' takes an object as an argument, and will merge whatever we define inside of 'setState()' with the existing data inside of the 'state'. This means React will only update the part of the state that changes, and will not modify any unrelated data in the state.


Example of How To Manipulate State using the 'this.setState()' method:
--
state = {
    persons: [
        { name: 'Corey', age: 26 },
        { name: 'Kaitlin', age: 26 },
        { name: 'Kyle', age: 21 }
    ],
    otherState: 'some other value'
}

switchNameHandler = () => {
    this.setState({
        persons: [
            { name: 'Cory', age: 26 },
            { name: 'Kaitlyn', age: 26 },
            { name: 'Kyle', age: 22 }
        ]
    });
}
--

In the example above, when 'switchNameHandler' is executed, only the 'persons[]' object in the 'state' would be manipulated, 'otherState:' would not be affected by the event and would remain the same.



------------------------------------
43. Using the useState() Hook for State Manipulation
------------------------------------

With React 16.8+ we are now able to manage state in Functional components using a feature called React Hooks. Hooks are what React calls functions that are exposed to us by React that we can use in Functional Components.

In-order to manipulate 'state' using React Hooks, we use the 'useState()' Hook. To use 'useState()' you first import the function from React:
--
import React, { useState } from 'react';
--

'useState' returns an array with exactly two elements. The first element we get back will always be our current state. The second element will always be a function that allows us to update the state, such that React is aware of it, and will re-render the component.

Once imported, we then can call the 'useState()' function inside of our component and pass in our initial state:
--
const app = props => {
    const [ personsState, setPersonsState ] = useState({
        persons: [
            { name: 'Corey', age: 26 },
            { name: 'Kaitlin', age: 26 },
            { name: 'Kyle', age: 21 }
        ],
        otherState: 'some other value'
    });

    return(...);
}
--

In the example above we use array de-structuring to pull the first returned item from 'setState()' (eg. the current state) into a 'personsState' constant. We also pull the second returned item (eg. the update state function) from 'setState()' into a 'setPersonsState' constant.

Now that we have defined our constants for the state, we can call pull the current state into our components like so:
--
return(
    <div className="App">
        <Person
            name={personsState.persons[0].name}
            age={personsState.person[0].age}
        />
        <Person
            name={personsState.persons[1].name}
            age={personsState.person[1].age}
        />
        <Person
            name={personsState.persons[2].name}
            age={personsState.person[2].age}
        />
    </div>
);
--

In the above example, we use 'personsState.persons[i]...' to access the 'persons{}' object inside of the 'personsState' constant.

In-order to update the state inside of our Functional component, we can add a function inside of our Functional component and store it in a constant. We then point to that function and inside of it, we 'setPersonsState()':
--
const app = props => {
    const [ personsState, setPersonsState ] = useState({
        persons: [
            { name: 'Corey', age: 26 },
            { name: 'Kaitlin', age: 26 },
            { name: 'Kyle', age: 21 }
        ],
        otherState: 'some other value'
    });

    const switchNameHandler = () => {
        setPersonsState({
            persons: [
                { name: 'Cory', age: 26 },
                { name: 'Kaitlyn', age: 26 },
                { name: 'Kyle', age: 22 }
            ]
        })
    }

    return(
        <div className="App">
            <button onClick={switchNameHandler}>Switch Name</button>
            <Person
                name={personsState.persons[0].name}
                age={personsState.person[0].age}
            />
            <Person
                name={personsState.persons[1].name}
                age={personsState.person[1].age}
            />
            <Person
                name={personsState.persons[2].name}
                age={personsState.person[2].age}
            />
        </div>
    );
}
--

In the above example, we create the 'switchNameHandler()' function, which we make a reference to in our <button>'s 'onClick' event. When the function is fired, it updates the current state with a new 'persons{}' object using the 'setPersonsState()' constant.

!! IMPORTANT !!
When we use the 'useState()' React Hook, when we update the state, it does not merge with the existing state, instead, it replaces the existing state. Because of this, when we use the 'useState()' Hook in Functional components, we typically would store each set of state data into its own 'useState()' constant:
--
const [ personsState, setPersonsState ] = useState({
    persons: [
        { name: 'Corey', age: 26 },
        { name: 'Kaitlin', age: 26 },
        { name: 'Kyle', age: 21 }
    ]
});

const [ otherState, setOtherState ] = useState({
    otherState: 'some other value'
});
--

In the above example we create two sets of de-structured constant variables. One for each data-set we need in state. This way, when we need to update one set of data in our code, we only need to replace that one set of data, and the other set will remain untouched.



------------------------------------
44. Stateless vs Stateful Components
------------------------------------

If you are managing state within a component, whether it's through the traditional Class-based approach, or by using the 'useState()' React Hook, that component is considered a Stateful component. Stateful components are also often refered to as 'Smart' or 'Container' components because they contain the state of the application.

A component that does not manage state is considered a Stateless component. Stateless components are also often refered to as 'Dumb' or 'Presentational' components. This is beacuse Stateless components only get external data and present it (output) in a structured way.

It is best practice to create as many Stateless components as possible. This makes the app easier to maintain and manage. You have a clear flow of data, it's very clear where your main logic sits, where your data changes and is distributed to the rest of the app. When developing components with this in-mind, If anyone ever needs to change something about the app, it's clear where the change needs to take place.



------------------------------------
45. Passing Method References Between Components
------------------------------------

What if you want to pass a reference to a method from a parent component into a child component? For example, call our 'switchNameHandler()' method in App.js inside of the <Person /> component (Person.js).

We can pass a reference to the method as a property onto the component:
--
App.js
--
<Person
    name={this.state.persons[0].name}
    age={this.state.persons[0].age}
    click={this.switchNameHandler} />
--
Person.js
--
<buton onClick={props.click}>Switch Name</button>
--

In the example above, We pass a 'click' property into the <Person /> component which has a refence to the 'this.switchNameHandler' method.

(click={this.switchNameHandler})

Then inside of Person.js we execute the method in the 'onClick' event of the <button> element by calling the 'click' property.

(onClick={props.click})


This means we can change the state in a Stateless component by referencing a method in a Stateful component.

If we want to pass a value into a method, first we accept the paramater (arg) in our method, and set the value we're changing to reference the paramater:

--
switchNameHandler = (newName) => {
    persons: [
        { name: newName, age: 26 }
        { name: 'Kaitlin', age: 26 }
        { name: 'Kyle', age: 21 }
    ]
}
--

In the example above we accept the 'newName' paramater into our method, and set it as the value for the first 'persons' object.

Then we can pass in the data in a couple of ways:
--
<button onClick={this.switchNameHandler.bind(this, "Cory")}>
--

In the example above we call 'bind()'. We use 'this' to ensure 'this' refers to the Class at runtime, then we set the value of the paramater we are passing into the method.

Another approach is to execute an es6 arrow function:
--
<button onClick={() => this.switchNameHandler('Cory')}>
--

In the example above, eventhough it looks like we're executing the method immediately by using the 'this.switchNameHandler()' syntax, It will not be executed immediately because first we are passing an anonymous function, which is only executed once the event is fired. Then we use '()' on our method call to immediately execute the method inside of our anonymous arrow function.

Note* - Even though the es6 arrow function takes in no arguments, it still recieves the event object.


Out of both options, the es6 arrow function is easier to use, but is less efficient, so ideally we should use the '.bind()' approach when possible.



------------------------------------
46. Adding Two Way Binding
------------------------------------

We can set up two-way binding such that text entered into an input field is immediately bound to another element on the page, and that element is also bound to the value of the input field.

To showcase this, first I create a new method called 'nameChangedHandler()' which takes in an 'event' object. The 'event' object is always passed by default. I set the state to equal the value of the event target (eg. <input value=...>):
--
App.js
--
nameChangedHandler = (event) => {
    this.setState({
        persons: [
            { name: event.target.value, age: 26 },
            { name: 'Kaitlin', age: 26 },
            { name: 'Kyle', age: 21 }
        ]
    });
}
--

In the above example, I make the name of the first 'persons' object equal to the 'event.target.value'. This will ensure the name is always the same as the value of the input field.

Next, I pass a new 'changed' prop into the <Person /> component, which references the 'nameChangedHandler()' method:
--
App.js
--
<Person 
    name={this.state.persons[0].name}
    age={this.state.persons[0].age}
    changed={this.nameChangedHandler} />
--

Now, inside of the <Person /> component file, we can access the 'changed' property. We listen to the 'onChange' event on the <input> element and set it to 'props.changed':
--
Person.js
--
<input type="text" onChange={props.changed} />
--

With all of this logic in-place, you will see that each <Person /> has an <input> element associated with it, however, only the <input> for the first <Person /> is bound. When you type in that field, the name of the first <Person /> is updated to match the value inside of the <input>.

This shows two things:
1. How we can dynamically update something, by calling an event and passing down method references.
2. How we can handle inputs.

So far we have bound the data one-way. The <input> updates the 'name' in the 'onChange' event. In-order for us to bind this both ways, we need to set the 'value' of the <input> equal to the value in the 'state':
-- 
Person.js
--
<input type="text" onChange={props.changed} value={props.name} />
--

In the example above, we set the 'value' of the <input> equal to 'props.name'. With this set up, we have now created two-way binding.

The <input> 'value' starts off as the initial value of the 'name' in the 'state'. Then when the 'onChange' event fires, the 'state' is updated with the new value from the event, which is also bound to the <input> 'value', so it also gets updated.



------------------------------------
47. Adding Styling with Stylesheets
------------------------------------

We can style components in multiple ways. One way is to use external Stylesheets. 

In-order to use external Stylesheets, first we create our external .css file. With React we typically keep styles scoped to a given component, so best practice here would be to create the .css file inside of component folder:
--
/Person/Person.css
--
.Person{
    ...
}
--

In-order to use the styles we created in our external Stylesheet, first we need to import it into our component using 'import ./FILENAME.css'. Once imported, the classes inside of the .css file become available for use in your JSX:
--
/Person/Person.js
--
import './Person.css';

const person = (props) => {
    return (
        <div className="Person">
            ...
        </div>
    );
}
--

In the example above we import the 'Person.css' file to make those styles available in the component. Then on our parent <div> we implement the '.Person' class.

Caveat*
--
This appoach creates global styling in your application, and is not scoped to the component itself. These styles are only brought in when the component is present on the page, but the styling set in external CSS will apply to the entire application when the CSS is present.



------------------------------------
48. Working with Inline Styles
------------------------------------

Another way to use styles is by using inline styles.

To do this, first you create a JavaScript object that defines your styles inside of your component:
--
const style = {
    backgroundColor: '#fff',
    font: 'inherit',
    ...
}
--

Then you can pass the object into the 'style' attribute of an element:
--
<div style={style}>
    ...
</div>
--

With this implemented, you can see that the element is now styled, with the properties set inside of the JavaScript object.

An added benefit to using the inline style approach is that the styles are scoped to the component itself, and are not global.

Caveat*
--
There are some restrictions to this approach, such as styling sudo elements and media queries, as there aren't object properties in JavaScript that map 1:1 with their CSS counterparts, however, there are tricks we can use to get around this, which are explained more in-detail later in this course.


------------------------------------
50. Useful Resources & Links
------------------------------------

create-react-app: 
https://github.com/facebookincubator/create-react-app

Introducing JSX: 
https://reactjs.org/docs/introducing-jsx.html

Rendering Elements: 
https://reactjs.org/docs/rendering-elements.html

Components & Props: 
https://reactjs.org/docs/components-and-props.html

Listenable Events: 
https://reactjs.org/docs/events.html