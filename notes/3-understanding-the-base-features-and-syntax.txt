===================================================
Section 3: Understanding the Base Features & Syntax
===================================================

------------------------------------
25. The Build Workflow
------------------------------------

To set up our local project we use the npm package 'create-react-app'. This comes with a build workflow that helps with: 

- CSS auto-prefixing - 'Normalizes' our CSS for wide browser support.
- Code linting - Warns you if you are writing sub-optimal code.
- Dependency management tool (Node -> npm) - Manages our third-party development libraries and packages.
- Bundler (Webpack) - Allows us to write modular code in separate files, then bundles these files together for release.
- Compiler (Babel) - Compiles our ES6/ES7 code into ES5 code.
- Local Development Server



------------------------------------
26. Using 'create-react-app'
------------------------------------

Following these steps will create a new React application on your machine.

1. First, if you do not have npm, first you need to install Node.JS (LTS): 

https://nodejs.org/en/download/ 

2. Next, install the 'create-react-app' package globally on your machine through the terminal using npm:

npm install -g create-react-app

3. Next, using the terminal, navigate to the folder on your machine where you want your React application to reside, then run the following command, setting 'application-name' as the name for your application:

create-react-app application-name

4. Once this finished installing, you can run the following command to start up the project. When running, a new tab will open in your browser, which will be the working application using your local development server:

npm start

You can now begin working on your application.

To cancel running the project, use ctrl+C in the terminal and enter Y to confirm.



------------------------------------
27. Understanding the Folder Structure
------------------------------------

See my notes in '/notes/3-react-folder-structure.txt'.



------------------------------------
28. Understanding Component Basics
------------------------------------

Typically in React we render only 1 root component. This is <App /> which is loaded from app.js into the ReactDOM.render() method inside of index.js.

Inside of <App /> is where we nest all of the other components our application might need. Each component can be comprised of other nested components, but in the end, all we're rendering is <App /> to create our single-page application.

React components can either be:
1. Stateful (Class-Based).
2. Stateless (Functional).

Stateful components start with the 'class' keyword. We import { Component } from 'react'. They then extend 'Component' to the 'class'. This provides a render() method to the class. The class based component needs to use render(). React calls this method to render something to the screen. render() is also what React uses to refresh the page when data/state changes.

As the name suggests, Stateful components are the only components that allow you to manage state out-of-the-box. Functional components can only use state through the use of React Hooks.

In both Stateful and Stateless components, you need to return(); JSX to the DOM. You also need to export the component in-order to import it elsewhere in your application.

Stateful Component Example (Class-Based):
--
import React, { Component } from 'react';

class App extends Component {
    render() {
        return(
            <div className="App">
                ...
            </div>
        );
    }
}

export default App;
--



------------------------------------
29. Understanding JSX
------------------------------------





------------------------------------
30. JSX Restrictions
------------------------------------





------------------------------------
31. Creating a Functional Component
------------------------------------





------------------------------------
32. Components & JSX Cheat Sheet
------------------------------------





------------------------------------
33. Working with Components & Re-Using Them
------------------------------------





------------------------------------
34. Outputting Dynamic Content
------------------------------------





------------------------------------
35. Working with Props
------------------------------------





------------------------------------
36. Understanding the Children Property
------------------------------------





------------------------------------
37. Understanding & Using State
------------------------------------





------------------------------------
38. Props & State
------------------------------------





------------------------------------
39. Handling Events with Methods
------------------------------------





------------------------------------
40. To Which Events Can You Listen?
------------------------------------





------------------------------------
41. Manipulating the State
------------------------------------





------------------------------------
42. Function Components Naming
------------------------------------





------------------------------------
43. Using the useState() Hook for State Manipulation
------------------------------------





------------------------------------
44. Stateless vs Stateful Components
------------------------------------





------------------------------------
45. Passing Method References Between Components
------------------------------------





------------------------------------
46. Adding Two Way Binding
------------------------------------





------------------------------------
47. Adding Styling with Stylesheets
------------------------------------





------------------------------------
48. Working with Inline Styles
------------------------------------





------------------------------------
Assignment 1: Time to Practice - The Base Syntax
------------------------------------





------------------------------------
49. Assignment Solution
------------------------------------





------------------------------------
50. Useful Resources & Links
------------------------------------

