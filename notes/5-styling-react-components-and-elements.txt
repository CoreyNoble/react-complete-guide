==============================================
Section 5: Styling React Components & Elements
==============================================

------------------------------------
64. Outlining the Problem Set
------------------------------------

Inline Styles:
--
Advantage:
- Styles are scoped to that component.

Disadvantage:
- Cannot utilize all CSS features.
(eg. sudo selectors, media queries)


External CSS Styles:
--
Advantage:
- Able to utilize all CSS features.

Disadvantage:
- Styles are globally set.
(eg. If you style a <button>, it styles all <button> elements)



------------------------------------
65. Setting Styles Dynamically
------------------------------------

We can manipulate inline 'style' properties dynamically with JavaScript:
--


render() {
    const style = {
        backgroundColor = 'green',
        ....
    }

    if (this.state.showPersons) {
        ....
        
        style.backgroundColor = 'red';
    }

    return (
        <div className="App">
            ....
            <button
                style={style}
                onClick={this.togglePersonsHandler}
            >Toggle Persons</button>
        </div>
    );
}
--

In the example above, we initially set the 'backgroundColor' property of our 'style' object to 'green'. This way the button is green when the <Person /> components are hidden.

Then when the 'showPersons' boolean flips to 'true' and we show the <Person /> components, we also change the 'backgroundColor' property of our 'style' object to 'red'. We do this to singal to the user that the next click will hide the <Person /> components.

'style' can still stay a constant, as we are not manipulating the object itself, we are just manipulating the value of a property inside of the object.



------------------------------------
66. Setting Class Names Dynamically
------------------------------------

You can dynamically assign classes to an element as long as what's passed into the 'className' property results in a string:
--
const classes = [];

if (this.state.persons.length <= 2) {
    classes.push('red'); // ['red']
}

if (this.state.persons.length <= 1) {
    classes.push('bold'); // ['red', 'bold']
}

return (
    <p className={classes.join(' ')}>Test Text</p>
);
--

In the example above we create a 'classes' variable which holds a list of relevent classes for our element. 

By using JavaScript, we check for conditions in our application, and adjust the 'classes' list based on that logic.

In-order to display the styles, we append the 'classes' array to the elements 'className' attribute and convert it to a string using the 'join()' method. We add a space when using 'join()' to ensure each item in the list is separated by a space in the string. 
(eg. className={classes.join(' ')})



------------------------------------
67. Adding and Using Radium
------------------------------------





------------------------------------
68. Using Radium for Media Queries
------------------------------------





------------------------------------
69. MUST READ: Enabling CSS Modules
------------------------------------





------------------------------------
70. Enabling & Using CSS Modules
------------------------------------





------------------------------------
71. More on CSS Modules
------------------------------------





------------------------------------
72. Adding Pseudo Selectors
------------------------------------





------------------------------------
73. Working with Media Queries
------------------------------------





------------------------------------
74. Useful Resources & Links
------------------------------------

